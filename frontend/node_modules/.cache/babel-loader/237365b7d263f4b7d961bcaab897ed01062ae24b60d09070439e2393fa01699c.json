{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000/S3';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const setAuthToken = token => {\n  if (token) {\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete apiClient.defaults.headers.common['Authorization'];\n  }\n};\n\n// User Registration\nexport const registerUser = async userData => {\n  try {\n    const response = await apiClient.post('/auth/oauth/register', userData);\n    return response;\n  } catch (error) {\n    console.error('Registration error:', error.response ? error.response.data : error.message);\n    alert('User already registered');\n  }\n};\n\n// User Login\nexport const loginUser = async (username, password) => {\n  const params = new URLSearchParams();\n  params.append('username', username);\n  params.append('password', password);\n  return await apiClient.post('/auth/oauth/login', params, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  });\n};\n\n// File Upload\nexport const uploadFile = async (file, folderId) => {\n  console.log(file);\n  const formData = new FormData();\n  formData.append('file', file);\n  if (folderId) formData.append('folder_id', folderId);\n  return await apiClient.post('/files/upload', formData, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  });\n};\nexport const listFiles = async () => {\n  const response = await apiClient.get('/files');\n  return response;\n};\n\n// Download File\nexport const downloadFile = async fileId => {\n  const response = await apiClient.get(`/files/download/${fileId}`, {\n    responseType: 'blob'\n  });\n  return response;\n};\n\n// Create Folder\nexport const createFolder = async (folderName, parentId) => {\n  return await apiClient.post('/folders', {\n    folder_name: folderName,\n    parent_id: parentId\n  });\n};\n\n// List Folders\nexport const listFolders = async () => {\n  return await apiClient.get('/folders');\n};\n\n// Delete Folder\nexport const deleteFolder = async folderId => {\n  return await apiClient.delete(`/folders/${folderId}`);\n};\nexport const getUsageAnalytics = async () => {\n  return await apiClient.get('/Analytics');\n};","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","setAuthToken","token","defaults","common","registerUser","userData","response","post","error","console","data","message","alert","loginUser","username","password","params","URLSearchParams","append","uploadFile","file","folderId","log","formData","FormData","listFiles","get","downloadFile","fileId","responseType","createFolder","folderName","parentId","folder_name","parent_id","listFolders","deleteFolder","delete","getUsageAnalytics"],"sources":["/home/kartik/S3 Project/Amazon-S3--Cloud-Storage/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000/S3';\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const setAuthToken = (token) => {\n  if (token) {\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete apiClient.defaults.headers.common['Authorization'];\n  }\n};\n\n// User Registration\nexport const registerUser = async (userData) => {\n  try {\n    const response = await apiClient.post('/auth/oauth/register', userData);\n    return response;\n  } catch (error) {\n    console.error('Registration error:', error.response ? error.response.data : error.message);\n    alert('User already registered');\n  }\n};\n\n\n\n// User Login\nexport const loginUser = async (username, password) => {\n    const params = new URLSearchParams();\n    params.append('username', username);\n    params.append('password', password);\n\n    return await apiClient.post('/auth/oauth/login', params, {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        },\n    });\n};\n\n// File Upload\nexport const uploadFile = async (file, folderId) => {\n  console.log(file)\n  const formData = new FormData();\n  formData.append('file', file);\n  if (folderId) formData.append('folder_id', folderId);\n  return await apiClient.post('/files/upload', formData,  \n        {headers: {\n    'Content-Type': 'application/x-www-form-urlencoded',\n}});\n};\n\nexport const listFiles = async () => {\n    const response = await apiClient.get('/files');\n    return response;\n  };\n  \n  // Download File\nexport const downloadFile = async (fileId) => {\n  const response = await apiClient.get(`/files/download/${fileId}`, {\n    responseType: 'blob',\n  });\n  return response;\n};\n\n  // Create Folder\n  export const createFolder = async (folderName, parentId) => {\n    return await apiClient.post('/folders', { folder_name: folderName, parent_id: parentId });\n  };\n  \n  // List Folders\n  export const listFolders = async () => {\n    return await apiClient.get('/folders');\n  };\n  \n  // Delete Folder\n  export const deleteFolder = async (folderId) => {\n    return await apiClient.delete(`/folders/${folderId}`);\n  };\n  \n  export const getUsageAnalytics = async () => {\n    return await apiClient.get('/Analytics');\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}