{"ast":null,"code":"var _jsxFileName = \"/home/kartik/S3 Project/frontend/src/components/Auth/Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { registerUser, setAuthToken } from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [token, setToken] = useState('');\n  const handleRegister = async () => {\n    try {\n      const response = await registerUser(token);\n      setAuthToken(response.data.jwt); // Save JWT in local storage or context\n      // Redirect to file list or dashboard\n    } catch (error) {\n      console.error('Registration failed:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: token,\n      onChange: e => setToken(e.target.value),\n      placeholder: \"OAuth2 Token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRegister,\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"ASU5DC/3PNAtDu6g7HTvQX3bJZs=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","registerUser","setAuthToken","jsxDEV","_jsxDEV","Register","_s","token","setToken","handleRegister","response","data","jwt","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/kartik/S3 Project/frontend/src/components/Auth/Register.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { registerUser, setAuthToken } from '../../api';\n\nconst Register = () => {\n  const [token, setToken] = useState('');\n\n  const handleRegister = async () => {\n    try {\n      const response = await registerUser(token);\n      setAuthToken(response.data.jwt); // Save JWT in local storage or context\n      // Redirect to file list or dashboard\n    } catch (error) {\n      console.error('Registration failed:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Register</h2>\n      <input \n        type=\"text\" \n        value={token} \n        onChange={(e) => setToken(e.target.value)} \n        placeholder=\"OAuth2 Token\" \n      />\n      <button onClick={handleRegister}>Register</button>\n    </div>\n  );\n};\n\nexport default Register;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,YAAY,EAAEC,YAAY,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMS,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,YAAY,CAACM,KAAK,CAAC;MAC1CL,YAAY,CAACQ,QAAQ,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;MACjC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACET,OAAA;IAAAW,QAAA,gBACEX,OAAA;MAAAW,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBf,OAAA;MACEgB,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEd,KAAM;MACbe,QAAQ,EAAGC,CAAC,IAAKf,QAAQ,CAACe,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,WAAW,EAAC;IAAc;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eACFf,OAAA;MAAQsB,OAAO,EAAEjB,cAAe;MAAAM,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV,CAAC;AAACb,EAAA,CAzBID,QAAQ;AAAAsB,EAAA,GAARtB,QAAQ;AA2Bd,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}