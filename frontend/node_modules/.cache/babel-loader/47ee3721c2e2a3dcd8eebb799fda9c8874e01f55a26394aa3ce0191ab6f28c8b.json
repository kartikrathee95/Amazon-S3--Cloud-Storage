{"ast":null,"code":"var _jsxFileName = \"/home/kartik/S3 Project/frontend/src/components/FileManagement/FileUpload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { uploadFile } from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  onUploadSuccess\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [folderId, setFolderId] = useState('');\n  const handleUpload = async () => {\n    if (!file) {\n      console.error('No file selected');\n      return;\n    }\n    try {\n      await uploadFile(file, folderId ? folderId : null);\n      console.log('File uploaded successfully');\n      onUploadSuccess(); // Call the prop function to refresh the file list\n    } catch (error) {\n      console.error('File upload failed:', error.response ? error.response.data : error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: e => setFile(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: folderId,\n      onChange: e => setFolderId(e.target.value),\n      placeholder: \"Folder ID (optional)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"O+1W10ey6JmVBb0zDvaIhHALQkk=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","uploadFile","jsxDEV","_jsxDEV","FileUpload","onUploadSuccess","_s","file","setFile","folderId","setFolderId","handleUpload","console","error","log","response","data","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","files","value","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/kartik/S3 Project/frontend/src/components/FileManagement/FileUpload.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { uploadFile } from '../../api';\n\nconst FileUpload = ({ onUploadSuccess }) => {\n  const [file, setFile] = useState(null);\n  const [folderId, setFolderId] = useState('');\n\n  const handleUpload = async () => {\n    if (!file) {\n      console.error('No file selected');\n      return;\n    }\n\n    try {\n      await uploadFile(file, folderId ? folderId : null);\n      console.log('File uploaded successfully');\n      onUploadSuccess(); // Call the prop function to refresh the file list\n    } catch (error) {\n      console.error('File upload failed:', error.response ? error.response.data : error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Upload File</h2>\n      <input \n        type=\"file\" \n        onChange={(e) => setFile(e.target.files[0])} \n      />\n      <input \n        type=\"text\" \n        value={folderId} \n        onChange={(e) => setFolderId(e.target.value)} \n        placeholder=\"Folder ID (optional)\" \n      />\n      <button onClick={handleUpload}>Upload</button>\n    </div>\n  );\n};\n\nexport default FileUpload;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACJ,IAAI,EAAE;MACTK,OAAO,CAACC,KAAK,CAAC,kBAAkB,CAAC;MACjC;IACF;IAEA,IAAI;MACF,MAAMZ,UAAU,CAACM,IAAI,EAAEE,QAAQ,GAAGA,QAAQ,GAAG,IAAI,CAAC;MAClDG,OAAO,CAACE,GAAG,CAAC,4BAA4B,CAAC;MACzCT,eAAe,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACE,QAAQ,GAAGF,KAAK,CAACE,QAAQ,CAACC,IAAI,GAAGH,KAAK,CAAC;IACpF;EACF,CAAC;EAED,oBACEV,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBlB,OAAA;MACEmB,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAGC,CAAC,IAAKhB,OAAO,CAACgB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACFlB,OAAA;MACEmB,IAAI,EAAC,MAAM;MACXK,KAAK,EAAElB,QAAS;MAChBc,QAAQ,EAAGC,CAAC,IAAKd,WAAW,CAACc,CAAC,CAACC,MAAM,CAACE,KAAK,CAAE;MAC7CC,WAAW,EAAC;IAAsB;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACFlB,OAAA;MAAQ0B,OAAO,EAAElB,YAAa;MAAAM,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAACf,EAAA,CAnCIF,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAqChB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}