{"ast":null,"code":"var _jsxFileName = \"/home/kartik/S3 Project/frontend/src/components/FileManagement/FileList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { listFiles, setAuthToken } from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileList = () => {\n  _s();\n  const [files, setFiles] = useState([]);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setAuthToken(token);\n    }\n    ;\n    const fetchFiles = async () => {\n      try {\n        const response = await listFiles();\n        setFiles(response.data); // Adjust based on your API response structure\n      } catch (error) {\n        console.error('Error fetching files:', error);\n      }\n    };\n    fetchFiles();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"File List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: files.map(file => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: file.name\n      }, file.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(FileList, \"Q2RYUcr07MgGv5yVCV31YurpQrA=\");\n_c = FileList;\nexport default FileList;\nvar _c;\n$RefreshReg$(_c, \"FileList\");","map":{"version":3,"names":["React","useEffect","useState","listFiles","setAuthToken","jsxDEV","_jsxDEV","FileList","_s","files","setFiles","token","localStorage","getItem","fetchFiles","response","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","file","name","id","_c","$RefreshReg$"],"sources":["/home/kartik/S3 Project/frontend/src/components/FileManagement/FileList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { listFiles, setAuthToken } from '../../api';\n\nconst FileList = () => {\n  const [files, setFiles] = useState([]);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n        if (token) {\n            setAuthToken(token);\n        };\n    const fetchFiles = async () => {\n      try {\n        const response = await listFiles();\n        setFiles(response.data); // Adjust based on your API response structure\n      } catch (error) {\n        console.error('Error fetching files:', error);\n      }\n    };\n\n    fetchFiles();\n  }, []);\n\n  return (\n    <div>\n      <h2>File List</h2>\n      <ul>\n        {files.map((file) => (\n          <li key={file.id}>{file.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default FileList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,YAAY,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACvC,IAAIF,KAAK,EAAE;MACPP,YAAY,CAACO,KAAK,CAAC;IACvB;IAAC;IACL,MAAMG,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMZ,SAAS,CAAC,CAAC;QAClCO,QAAQ,CAACK,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAEDH,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBjB,OAAA;MAAAa,QAAA,EACGV,KAAK,CAACe,GAAG,CAAEC,IAAI,iBACdnB,OAAA;QAAAa,QAAA,EAAmBM,IAAI,CAACC;MAAI,GAAnBD,IAAI,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAClC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACf,EAAA,CA9BID,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AAgCd,eAAeA,QAAQ;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}