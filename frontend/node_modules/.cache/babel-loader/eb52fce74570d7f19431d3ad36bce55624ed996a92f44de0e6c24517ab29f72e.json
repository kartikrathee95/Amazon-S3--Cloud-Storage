{"ast":null,"code":"var _jsxFileName = \"/home/kartik/S3 Project/frontend/src/components/FileManagement/FileUpload.js\",\n  _s = $RefreshSig$();\n// src/components/FileManagement/FileUpload.js\nimport React, { useState } from 'react';\nimport { uploadFile } from '../../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  onUploadSuccess\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [folderId, setFolderId] = useState('');\n  const handleUpload = async e => {\n    e.preventDefault();\n    if (!file) {\n      console.error('No file selected');\n      return;\n    }\n    try {\n      await uploadFile(file, folderId ? folderId : null);\n      console.log('File uploaded successfully');\n      onUploadSuccess(); // Call the function to refresh the file list\n    } catch (error) {\n      console.error('File upload failed:', error.response ? error.response.data : error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => setFile(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: folderId,\n        onChange: e => setFolderId(e.target.value),\n        placeholder: \"Folder ID (optional)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(FileUpload, \"O+1W10ey6JmVBb0zDvaIhHALQkk=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","uploadFile","jsxDEV","_jsxDEV","FileUpload","onUploadSuccess","_s","file","setFile","folderId","setFolderId","handleUpload","e","preventDefault","console","error","log","response","data","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","target","files","value","placeholder","_c","$RefreshReg$"],"sources":["/home/kartik/S3 Project/frontend/src/components/FileManagement/FileUpload.js"],"sourcesContent":["// src/components/FileManagement/FileUpload.js\nimport React, { useState } from 'react';\nimport { uploadFile } from '../../api';\n\nconst FileUpload = ({ onUploadSuccess }) => {\n    const [file, setFile] = useState(null);\n    const [folderId, setFolderId] = useState('');\n\n    const handleUpload = async (e) => {\n        e.preventDefault();\n        if (!file) {\n            console.error('No file selected');\n            return;\n        }\n\n        try {\n            await uploadFile(file, folderId ? folderId : null);\n            console.log('File uploaded successfully');\n            onUploadSuccess(); // Call the function to refresh the file list\n        } catch (error) {\n            console.error('File upload failed:', error.response ? error.response.data : error);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Upload File</h2>\n            <form onSubmit={handleUpload}>\n                <input \n                    type=\"file\" \n                    onChange={(e) => setFile(e.target.files[0])} \n                />\n                <input \n                    type=\"text\" \n                    value={folderId} \n                    onChange={(e) => setFolderId(e.target.value)} \n                    placeholder=\"Folder ID (optional)\" \n                />\n                <button type=\"submit\">Upload</button>\n            </form>\n        </div>\n    );\n};\n\nexport default FileUpload;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMW,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACN,IAAI,EAAE;MACPO,OAAO,CAACC,KAAK,CAAC,kBAAkB,CAAC;MACjC;IACJ;IAEA,IAAI;MACA,MAAMd,UAAU,CAACM,IAAI,EAAEE,QAAQ,GAAGA,QAAQ,GAAG,IAAI,CAAC;MAClDK,OAAO,CAACE,GAAG,CAAC,4BAA4B,CAAC;MACzCX,eAAe,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAACE,QAAQ,GAAGF,KAAK,CAACE,QAAQ,CAACC,IAAI,GAAGH,KAAK,CAAC;IACtF;EACJ,CAAC;EAED,oBACIZ,OAAA;IAAAgB,QAAA,gBACIhB,OAAA;MAAAgB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBpB,OAAA;MAAMqB,QAAQ,EAAEb,YAAa;MAAAQ,QAAA,gBACzBhB,OAAA;QACIsB,IAAI,EAAC,MAAM;QACXC,QAAQ,EAAGd,CAAC,IAAKJ,OAAO,CAACI,CAAC,CAACe,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,eACFpB,OAAA;QACIsB,IAAI,EAAC,MAAM;QACXI,KAAK,EAAEpB,QAAS;QAChBiB,QAAQ,EAAGd,CAAC,IAAKF,WAAW,CAACE,CAAC,CAACe,MAAM,CAACE,KAAK,CAAE;QAC7CC,WAAW,EAAC;MAAsB;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACFpB,OAAA;QAAQsB,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd,CAAC;AAACjB,EAAA,CAtCIF,UAAU;AAAA2B,EAAA,GAAV3B,UAAU;AAwChB,eAAeA,UAAU;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}